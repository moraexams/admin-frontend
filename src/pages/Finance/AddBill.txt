// THIS IS A STASHED FILE FOR NOW.
// STASHED HERE FOR FUTURE REFERENCE.


import { useState } from "react";
import { useDropzone } from "react-dropzone";


	billFile: z
		.array(z.instanceof(File))
		.optional()
		.refine(
			(files) =>
				!files ||
				files.every((file) =>
					["image/", "application/pdf"].some((type) =>
						file.type.startsWith(type),
					),
				),
			"Only image or PDF files are allowed",
		),


	const [fileName, setFileName] = useState("");
	const [filePreview, setFilePreview] = useState<string | null>(null);
	// to reset
		setFileName("");
		setFilePreview(null);
	
	const { getRootProps, getInputProps, isDragActive } = useDropzone({
		onDrop: (acceptedFiles) => {
			const maxSize = 5 * 1024 * 1024; // 5 MB
			if (acceptedFiles[0]?.size > maxSize) {
				toast.error("File size exceeds 5 MB");
				return;
			}

			if (acceptedFiles?.[0]) {
				const serialNo = new Date().getTime(); // Use timestamp as a unique serial number
				const transactionType = watch("transactionType"); // Get the current transaction type
				const expenseType = watch("type"); // Get the current expense type
				const fileExtension = acceptedFiles[0].name.split(".").pop(); // Extract file extension

				// Determine the file name based on transaction type and expense type
				let renamedFileName = `${transactionType}_${serialNo}.${fileExtension}`;
				if (
					transactionType === "expense" &&
					expenseType.toLowerCase() === "transport"
				) {
					renamedFileName = `transport_${serialNo}.${fileExtension}`;
				}

				const renamedFile = new File([acceptedFiles[0]], renamedFileName, {
					type: acceptedFiles[0].type,
				});

				setValue("billFile", [renamedFile]); // Store the renamed file
				setFileName(renamedFileName); // Update the file name in the UI

				if (renamedFile.type.startsWith("image/")) {
					setFilePreview(URL.createObjectURL(renamedFile)); // Generate preview for images
				} else {
					setFilePreview(null); // No preview for non-image files
				}

				toast.success(`File renamed to ${renamedFileName}`);
			}
		},
		accept: {
			"image/*": [],
			"application/pdf": [],
		},
		multiple: false, // Allow only one file
	});



{/* Bill Upload */}
					<div>
						<label className="block font-medium mb-1">Upload Bill</label>
						<div
							{...getRootProps()}
							className="w-full px-4 py-10 text-center border-2 border-dashed rounded-md transition-colors cursor-pointer border-gray-300 bg-white dark:bg-form-input dark:border-form-strokedark dark:text-white"
						>
							<input {...getInputProps()} />
							{isDragActive ? (
								<p className="text-blue-500">Drop the file here ...</p>
							) : (
								<p className="text-sm text-gray-500">
									Drag & drop a bill file here, or click to select
								</p>
							)}
							{fileName && (
								<p className="text-sm mt-2 text-gray-600">
									Selected: {fileName}
								</p>
							)}
							{filePreview && (
								<img
									src={filePreview}
									alt="Preview"
									className="mx-auto mt-2 max-h-48 rounded-md"
								/>
							)}
						</div>
					</div>
